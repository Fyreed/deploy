{"version":3,"sources":["components/Account/Account_style/Account.module.css","components/Account/Account_style/Posts.module.css","components/Account/Account_style/Post_style/Post.module.css","components/Account/Post/Post.jsx","components/Account/Posts.jsx","components/Account/PostsContainer.jsx","components/Account/AccountInfo/AccountStatus.jsx","components/Account/Account.jsx","components/Account/AccountContainer.jsx"],"names":["module","exports","Post","props","className","Post_style","box","src","alt","avatar","text","message","likesCount","maxLength255","maxLength","NewPostForm","reduxForm","form","onSubmit","handleSubmit","Field","Posts_style","input","placeholder","name","component","Textarea","validate","required","add","Posts","console","log","postsElements","posts","map","p","id","header","value","addPost","newPost","PostsContainer","connect","state","accountPage","dispatch","addPostActionCreater","AccountStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","type","Account","account","Account_style","photos","large","user","small","info","fullName","item","aboutMe","Preloader","AccountContainer","componentDidMount","userId","match","params","myId","getAccount","getStatus","this","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.e68047ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Account_box__1Y2aa\",\"header\":\"Account_header__CMMu3\",\"user\":\"Account_user__2CQWI\",\"avatar\":\"Account_avatar__3zwW1\",\"info\":\"Account_info__2IhAs\",\"name\":\"Account_name__3oGK9\",\"item\":\"Account_item__3Sw-O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Posts_box__21FER\",\"header\":\"Posts_header__3HQUy\",\"input\":\"Posts_input__1DNMM\",\"add\":\"Posts_add__1VJ0O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Post_box__3p03e\"};","\nimport Post_style from '../Account_style/Post_style/Post.module.css'\n\nconst Post = (props) => {\n\treturn (\n\t\t<div className={Post_style.box}>\n\t\t\t<img src=\"\" alt=\"\" className={Post_style.avatar} />\n\t\t\t<p className={Post_style.text}>{props.message}</p>\n\t\t\t<span><h2>Likes</h2>{props.likesCount}</span>\n\t\t</div>\n\t);\n}\n\nexport default Post","import Posts_style from './Account_style/Posts.module.css'\nimport Post from './Post/Post';\nimport React from 'react';\nimport {Field, reduxForm} from 'redux-form'\nimport { required, maxLength } from '../../utils/valodators/validators';\nimport { Textarea } from '../FormControl/FormControl';\n\nconst Posts = (props) => {\n\n\tconsole.log('hey hey')\n\t\n\tlet postsElements = props.posts.map( p => <Post key={p.id} message={p.message} likesCount={p.likesCount}></Post> )\n\n\n\n\tconst newPost = (value) => {\n\t\tprops.addPost(value.newPost)\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<div className={Posts_style.box}>\n\t\t\t<p className={Posts_style.header}>My posts</p>\n\t\t\t<NewPostForm onSubmit={newPost} />\n\t\t</div>\n\t\t\t{postsElements}\n\t\t</div>\n\t\t\n\t);\n}\n\nconst maxLength255 = maxLength(255)\n\nconst newPost = (props) => {\n\treturn (\n\t\t<form onSubmit={props.handleSubmit}>\n\t\t\t<Field className={Posts_style.input} placeholder='Enter new post' name='newPost' component={Textarea} validate={[required, maxLength255]} />\n\t\t\t<button className={Posts_style.add}>send</button>\n\t\t</form>\n\t)\n}\n\nconst NewPostForm = reduxForm ({ form: 'accountNewPostForm'}) (newPost)\n\n\nexport default Posts","import Posts from \"./Posts\"\nimport { addPostActionCreater, onPostChangeActionCreater } from '../../Redux/accountPageReducer';\nimport { connect } from \"react-redux\";\n\n\nlet mapStateToProps = (state) => {\n\treturn {\n\t\tposts: state.accountPage.posts\n\t}\n}\n\nlet mapDispatchToProps = (dispatch) => {\n\t\n\treturn {\n\t\taddPost: (newPost) => {\n\t\t\tdispatch(addPostActionCreater(newPost))\n\t\t}\n\t}\n}\n\nlet PostsContainer = connect (mapStateToProps, mapDispatchToProps) (Posts)\n\nexport default PostsContainer","import React, { useEffect, useState } from \"react\"\n\n\nconst AccountStatus = (props) => {\n\n\t// state = {\n\t// \teditMode: false,\n\t// \tstatus: props.status\n\t// }\n\t// activeEditMode = () => {\n\t// \tsetState({\n\t// \t\teditMode: true\n\t// \t})\n\t// }\n\n\t// disableEditMode = () => {\n\t// \tsetState({\n\t// \t\teditMode: false\n\t// \t})\n\t// \tprops.updateStatus(state.status)\n\t// }\n\n\n\n\t// onStatusChange = (e) => {\n\t// \tsetState({\n\t// \t\tstatus: e.currentTarget.value\n\t// \t})\n\n\t// }\n\n\t// componentDidUpdate(prevProps, prevState) {\n\t// \tif (prevProps.status !== props.status) {\n\t// \t\tsetState({\n\t// \t\t\tstatus: props.status\n\t// \t\t})\n\t// \t}\n\t// }\n\n\tconst [editMode, setEditMode] = useState(false)\n\tconst [status, setStatus] = useState()\n\n\tuseEffect(() => {\n\t\tsetStatus(props.status)\n\t}, [props.status])\n\n\tconst activeEditMode = () => {\n\t\tsetEditMode(true)\n\t}\n\n\tconst disableEditMode = () => {\n\t\tsetEditMode(false)\n\t\tprops.updateStatus(status)\n\t}\n\n\tconst onStatusChange = (e) => {\n\t\tsetStatus(e.currentTarget.value)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{!editMode &&\n\t\t\t\t<div>\n\t\t\t\t\t<span onClick={activeEditMode} >{status || 'Enter new status'}</span>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{editMode &&\n\t\t\t\t<div>\n\t\t\t\t\t<input onChange={onStatusChange} onBlur={disableEditMode} autoFocus={true} type=\"text\" value={status}  />\n\t\t\t\t</div>\n\t\t\t}\n\n\n\t\t</>\n\t)\n}\n\n\nexport default AccountStatus","import Preloader from '../Common/Preloader/Preloader';\nimport Account_style from './Account_style/Account.module.css'\nimport PostsContainer from './PostsContainer';\nimport AccountStatus from './AccountInfo/AccountStatus'\n\nconst Account = (props) => {\n\n  \n\n  if  (!props.account) {\n    return <Preloader />\n  } else return (\n    <div className={Account_style.box}>\n      <img src={props.account.photos.large} alt=\"\" className={Account_style.header} />\n      <div className={Account_style.user}>\n        <img src={props.account.photos.small} alt=\"\" className={Account_style.avatar} />\n        <ul className={Account_style.info}>\n          <li className={Account_style.name}>{props.account.fullName}</li>\n          <li className={Account_style.item}>Date of Birth: 21 June</li>\n          <li className={Account_style.item}>City: Sevastopol</li>\n          <li className={Account_style.item}>Education: SevSU</li>\n          <li className={Account_style.item}>Web Site: https//...</li>\n          <li className={Account_style.item}>About me: {props.account.aboutMe}</li>\n        </ul>\n        <AccountStatus status={props.status} updateStatus={props.updateStatus} />\n      </div>\n      <PostsContainer />\n    </div>\n  );\n}\n// https://yt3.ggpht.com/ytc/AKedOLQDpJL4j3zA9P_m9NpSA9NV8Fp2LoRg8Gdjy-OW=s900-c-k-c0x00ffffff-no-rj\nexport default Account;","\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Account from './Account';\nimport { withRouter } from 'react-router';\nimport { getAccount, getStatus, updateStatus } from '../../Redux/accountPageReducer';\nimport { compose } from 'redux';\n\nclass AccountContainer extends React.Component {\n\n\tcomponentDidMount = () => {\n\t\tlet userId = this.props.match.params.userId\n\t\tif (!userId) userId = this.props.myId\n\t\tthis.props.getAccount(userId)\n\t\tthis.props.getStatus(userId)\n\t}\n\n\n\trender () {\n\t\treturn (\n\t\t\t<Account {...this.props} status={this.props.status} updateStatus={this.props.updateStatus}/>\n\t\t)\n\t}\n}\n\nlet mapStateToProps = (state) => {\n\treturn {\n\t\taccount: state.accountPage.account,\n\t\tstatus: state.accountPage.status,\n\t\tmyId: state.auth.userId,\n\t\tisAuth: state.auth.isAuth\n\t}\n}\n\nexport default compose(\n\tconnect (mapStateToProps, {getAccount, getStatus, updateStatus}),\n\twithRouter\n) (AccountContainer)"],"sourceRoot":""}